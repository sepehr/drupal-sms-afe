<?php

/**
 * @file
 * Contains necessary AFE gateway hooks, helpers and callbacks.
 */

/**
 * Constant for AFE default gateway address.
 */
define('SMS_AFE_DEFAULT_GATEWAY', 'http://www.afe.ir/webservice/webservice.asmx?wsdl');

/**
 * Implements hook_menu().
 */
function sms_afe_menu() {
  $items = array();

  $items['sms/afe/receiver'] = array(
    'title' => 'Incoming SMS Messages Gateway',
    'description' => 'Incoming SMS messages form AFE gateway',
    'page callback' => 'sms_afe_incoming_callback',
    'access callback' => 'sms_afe_incoming_access',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_gateway_info().
 */
function sms_afe_gateway_info() {
  return array(
    'afe' => array(
      'name' => 'AFE',
      'send' => 'sms_afe_send',
      'configure form' => 'sms_afe_admin_form',
      'format number'  => 'sms_afe_format_number',
      'validate number' => 'sms_afe_validate_number',
      'receive' => TRUE,
    ),
  );
}

/**
 * Access callback for traffic relay listener.
 */
function sms_afe_incoming_access() {
  return TRUE;
}

/**
 * Menu callback for traffic relay listener.
 */
function sms_afe_incoming_callback() {
  $receiver = check_plain($_REQUEST['to']);
  $message = check_plain($_REQUEST['text']);
  $sender = _sms_afe_number_prefix_purge(check_plain($_REQUEST['from']));

  watchdog('sms_afe', 'Received SMS message from %sender: %message', array(
    '%sender' => $sender,
    '%message' => $message,
  ));

  // Notify smsframework.
  sms_incoming($sender, $message);
}

/**
 * AFE SMS gateway administration form.
 *
 * @param $configuration
 *   SMS gateway configuration.
 *
 * @ingroup forms
 */
function sms_afe_admin_form($configuration) {
  $form = array();

  // Line number:
  $form['sms_afe_line'] = array(
    '#type' => 'textfield',
    '#title' => t('Line Number'),
    '#description' => t('The number of your AFE phone line.'),
    '#default_value' => $configuration['sms_afe_line'],
    '#required' => TRUE,
  );
  // AFE username:
  $form['sms_afe_username'] = array(
    '#type' => 'textfield',
    '#title' => t('Username'),
    '#description' => t('The username of your AFE account.'),
    '#default_value' => $configuration['sms_afe_username'],
    '#required' => TRUE,
  );
  // AFE password:
  $form['sms_afe_password'] = array(
    '#type' => 'textfield',
    '#title' => t('Password'),
    '#description' => t('The password of your AFE account.'),
    '#default_value' => $configuration['sms_afe_password'],
    '#required' => TRUE,
  );

  // Outgoing SMS Settings fieldset.
  $form['sms_afe_outgoing_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Outgoing SMS Settings'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  // SOAP server endpoint address:
  $form['sms_afe_outgoing_settings']['sms_afe_soap_server'] = array(
    '#type' => 'textfield',
    '#title' => t('SOAP Server Endpoint'),
    '#description' => t('Do not change the default, Unless you have a different endpoint in your technical documentation.'),
    '#default_value' => $configuration['sms_afe_soap_server'] ? $configuration['sms_afe_soap_server'] : SMS_AFE_DEFAULT_GATEWAY,
    '#required' => TRUE,
  );
  // SMS sending method:
  $form['sms_afe_outgoing_settings']['sms_afe_send_method'] = array(
    '#type' => 'select',
    '#title' => t('Default sending method'),
    '#description' => t('Specify how the outgoing message will be appeared on the recipient device.'),
    '#default_value' => isset($configuration['sms_afe_send_method']) ? $configuration['sms_afe_send_method'] : '1',
    '#required' => TRUE,
    '#options' => array(
      // Show on recipient's device screen and do not save:
      '0' => t('Show on device screen'),
      // Store on the device default memory:
      '1' => t('Store in device memory'),
      // Store on the device SIM memory:
      '2' => t('Store in the device SIM'),
    ),
  );

  // If API credentials is already set,
  // also provide incoming messages configuration.
  if ($configuration['sms_afe_username'] && $configuration['sms_afe_password']) {
    global $base_root;
    // Incoming SMS Settings fieldset.
    $form['sms_afe_incoming_settings'] = array(
      '#type' => 'fieldset',
      '#title' => t('Incoming SMS Settings'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    // Traffic relay gateway address:
    $form['sms_afe_incoming_settings']['sms_afe_receiver'] = array(
      '#type' => 'textfield',
      '#title' => t('Traffic Relay Gateway'),
      '#description' => t("This is where we listen for incoming SMS messages. You need to copy & paste this URL into your http://afe.ir/ panel's settings."),
      '#value' => $base_root . url('sms/afe/receiver'),
      '#disabled' => TRUE,
    );
  }

  return $form;
}

/**
 * Validation callback for administration form.
 */
function sms_afe_admin_form_validate($form, &$form_state) {
  // Check line number:
  if (!ctype_digit($form_state['values']['sms_afe_line'])) {
    form_set_error('sms_afe_line', t('SMS line number needs to be a numeric value.'));
  }
  // Check SOAP server endpoint address:
  if (!valid_url($form_state['values']['sms_afe_soap_server'], TRUE)) {
    form_set_error('sms_afe_soap_server', t('SOAP Server Endpoint address needs to be a valid URL.'));
  }
}

/**
 * SMSFramework number formatter callback for AFE gateway.
 *
 * @param $number
 *   The number to be pretty formatted.
 * @param $options
 *   Gateway additional options.
 *
 * @return
 *   Formatted number.
 */
function sms_afe_format_number($number, $options = array()) {
  //return _sms_afe_number_prefix_purge($number);
}

/**
 * SMSFramework number validator callback for AFE gateway.
 *
 * @param $number
 *   The number to be validated.
 * @param $options
 *   Gateway additional options.
 *
 * @return
 *   Error if could not validate.
 */
function sms_afe_validate_number(&$number, $options = array()) {
  //$number = _sms_afe_number_prefix_purge($number);
  //if (drupal_strlen($number) != 10) {
  //  return form_set_error('number', t('Please ensure that you have entered a valid mobile number.'));
  //}
}

/**
 * AFE SMS send callback.
 *
 * @param $number
 *   Receiver line number.
 * @param $message
 *   SMS message to be sent.
 * @param $options
 *   An array of additional properties as defined in gateway module's send form.
 *
 * @return
 *   An array outputed from _sms_afe_soap_parse() helper.
 */
function sms_afe_send($number, $message, $options) {
  // Execute remote SOAP method.
  $results = _sms_afe_soap_call('SendMessage', array(
    'Mobile'  => array('string' => $number),
    'Message' => $message,
  ));

  // Return the error array, if there were any.
  // If $soap_results['status'] is set to FALSE,
  // $soap_results contains the error array, not the SOAP call results.
  if (isset($results['status']) && $results['status'] == FALSE) {
    return $results;
  }

  // If we're here, there were no error in the SOAP call and
  // its results. Now, we have to check the SOAP operation status code.
  return _sms_afe_soap_parse('SendMessage', $results);
}

/**
 * Helper function to call a remote SOAP method.
 *
 * @param $soap_method
 *   Remote SOAP method to call.
 * @param $soap_params
 *   SOAP parameters.
 * @param $soap_options
 *   SOAP call options.
 *
 * @return
 *   SOAP call results or an error array.
 */
function _sms_afe_soap_call($soap_method, $soap_params = array(), $soap_options = NULL) {
  // Set default SOAP options, if not yet set.
  if (is_null($soap_options)) {
    $soap_options = array(
      'style' => 'rpc',
      'use' => 'encoded',
    );
  }

  // Get gateway configuration.
  $gateway = sms_gateways('gateway', 'afe');

  // Filling necessary SOAP call auth parameters.
  $soap_params['Number'] = $gateway['configuration']['sms_afe_line'];
  $soap_params['Username'] = $gateway['configuration']['sms_afe_username'];
  $soap_params['Password'] = $gateway['configuration']['sms_afe_password'];

  // Add SendMessage specific parameters.
  if ($soap_method == 'SendMessage') {
    $soap_params['Type'] = $gateway['configuration']['sms_afe_send_method'];
  }

  // Instantiate a DrupalSoapClient instance.
  $soap_server = $gateway['configuration']['sms_afe_soap_server'];
  $soap_client = soapclient_init_client($soap_server, TRUE, $soap_options);

  // Checking instantiation errors.
  if ($soap_client['#error']) {
    // Log errors.
    watchdog('sms_afe', 'Could not connect to AFE SMS gateway webservice. Details: %error', array('%error' => $soap_client['#error']), WATCHDOG_ERROR);
    return _sms_afe_error('Could not connect to AFE SMS gateway webservice, please recheck SOAP settings. Error details has been logged.', FALSE);
  }

  // Set SOAP client settings before the remote call.
  $soap_client['#return']->client->decode_utf8 = FALSE;
  $soap_client['#return']->client->defencoding = 'UTF-8';

  // Call the SOAP method.
  $soap_results = $soap_client['#return']->call($soap_method, $soap_params);

  // And check for errors.
  if ($soap_results['#error']) {
    return _sms_afe_error('Failed to send the SMS message. Faultstring: @faultstring, Error: @error', array(
      '@error' => $soap_results['#error'],
      '@faultstring' => $soap_results['#return']['faultstring'],
    ), FALSE);
  }

  // Return the SOAP call results, if there were no SOAP error.
  // The function who receive these results, should check it for operation status codes.
  return $soap_results['#return'];
}

/**
 * Helper function to handle the module errors.
 *
 * The error array needs to be passed to smsframework via the send callback.
 * It also sets a drupal message to show the message to the end-user if it configured so.
 *
 * @param $message
 *   Error message.
 * @param $variables
 *   Placeholders to be placed in $message.
 * @param $display
 *   To display the message or not.
 *
 * @return
 *   The said error array.
 */
function _sms_afe_error($message, $variables = array(), $display = FALSE) {
  if ($display) {
    drupal_set_message(t($message, $variables), 'error', FALSE);
  }

  watchdog('sms_afe', $message, $variables, WATCHDOG_ERROR);
  return array(
    'status' => FALSE,
    'message' => $message,
    'variables' => $variables,
  );
}

/**
 * Helper function to successify a send operation.
 *
 * The success array needs to be passed to smsframework via the send callback.
 * It also sets a drupal message to show the message to the end-user if it configured so.
 *
 * @param $message
 *   Success message.
 * @param $variables
 *   Placeholders to be placed in $message.
 * @param $display
 *   To display the message or not.
 *
 * @return
 *   The said error array.
 */
function _sms_afe_success($message, $variables = array(), $display = FALSE) {
  if ($display) {
    drupal_set_message(t($message, $variables));
  }

  watchdog('sms_afe', $message, $variables, WATCHDOG_INFO);
  return array(
    'status' => TRUE,
    'message' => $message,
    'variables' => $variables,
  );
}

/**
 * Parses the SOAP method call results, sets messages, etc.
 *
 * @param $soap_method
 *   The name of the SOAP method which have been called.
 * @param $soap_results
 *   Results of the call.
 *
 * @return mixed
 *   Either an array indicating the result of the send
 *   as per required by SMSFramework or the SOAP result
 *   itself in case of no failure.
 */
function _sms_afe_soap_parse($soap_method, $soap_results) {
  switch (strtolower($soap_results["{$soap_method}Result"]['string'])) {
    // Well sent!
    case 'send successfully':
      return _sms_afe_success($soap_results["{$soap_method}Result"]['string']);
    // There were errors.
    default:
      return _sms_afe_error($soap_results["{$soap_method}Result"]['string']);
  }
}

/**
 * Helper function to remove zero and/or area code prefixes from a mobile number.
 *
 * @param $number
 *   Number to get prefix-purged!
 *
 * @return
 *   Prefix-purged number.
 */
function _sms_afe_number_prefix_purge($number) {
  $number = ltrim(trim($number), '0');
  $number = str_replace('+98', '', $number);

  if (substr($number, 0, 2) == '98') {
    $number = substr($number, 2);
  }

  return $number;
}
