<?php

/**
 * @file
 * Contains necessary AFE gateway hooks, helpers and callbacks.
 */

/**
 * Constant for AFE default gateway address.
 */
define('SMS_AFE_DEFAULT_GATEWAY', '‫‪http://afe.ir/WebService/WebService.asmx‬');

/**
 * Implements hook_menu().
 */
function sms_afe_menu() {
  $items = array();

  $items['sms/afe/receiver'] = array(
    'title' => 'Incoming SMS Messages Gateway',
    'description' => 'Incoming SMS messages form AFE gateway',
    'page callback' => 'sms_afe_incoming_callback',
    'access callback' => 'sms_afe_incoming_access',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_gateway_info().
 */
function sms_afe_gateway_info() {
  return array(
    'irantc' => array(
      'name' => 'AFE',
      'send' => 'sms_afe_send',
      'configure form' => 'sms_afe_admin_form',
      'format number'  => 'sms_afe_format_number',
      'validate number' => 'sms_afe_validate_number',
      'receive' => TRUE,
    ),
  );
}

/**
 * AFE SMS gateway administration form.
 *
 * @param $configuration
 *   SMS gateway configuration.
 *
 * @ingroup forms
 */
function sms_afe_admin_form($configuration) {
  $form = array();

  // Line number:
  $form['sms_afe_line'] = array(
    '#type' => 'textfield',
    '#title' => t('Line Number'),
    '#description' => t('The number of your AFE phone line.'),
    '#default_value' => $configuration['sms_afe_line'],
    '#required' => TRUE,
  );
  // AFE username:
  $form['sms_afe_username'] = array(
    '#type' => 'textfield',
    '#title' => t('Username'),
    '#description' => t('The username of your AFE account.'),
    '#default_value' => $configuration['sms_afe_username'],
    '#required' => TRUE,
  );
  // AFE password:
  $form['sms_afe_password'] = array(
    '#type' => 'textfield',
    '#title' => t('Password'),
    '#description' => t('The password of your AFE account.'),
    '#default_value' => $configuration['sms_afe_password'],
    '#required' => TRUE,
  );

  // Outgoing SMS Settings fieldset.
  $form['sms_afe_outgoing_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Outgoing SMS Settings'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  // SOAP server endpoint address:
  $form['sms_afe_outgoing_settings']['sms_afe_soap_server'] = array(
    '#type' => 'textfield',
    '#title' => t('SOAP Server Endpoint'),
    '#description' => t('Do not change the default, Unless you have a different endpoint in your technical documentation.'),
    '#default_value' => $configuration['sms_afe_soap_server'] ? $configuration['sms_afe_soap_server'] : SMS_AFE_DEFAULT_GATEWAY,
    '#required' => TRUE,
  );

  // If API credentials is already set,
  // also provide incoming messages configuration.
  if ($configuration['sms_afe_username'] && $configuration['sms_afe_password']) {
    global $base_root;
    // Incoming SMS Settings fieldset.
    $form['sms_afe_incoming_settings'] = array(
      '#type' => 'fieldset',
      '#title' => t('Incoming SMS Settings'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    // Traffic relay gateway address:
    $form['sms_afe_incoming_settings']['sms_afe_receiver'] = array(
      '#type' => 'textfield',
      '#title' => t('Traffic Relay Gateway'),
      '#description' => t("This is where we listen for incoming SMS messages. You need to copy & paste this URL into your http://afe.ir/ panel's settings."),
      '#value' => $base_root . url('sms/afe/receiver'),
      '#disabled' => TRUE,
    );
  }

  return $form;
}

/**
 * Validation callback for administration form.
 */
function sms_afe_admin_form_validate($form, &$form_state) {
  if (!ctype_digit($form_state['values']['sms_afe_line'])) {
    form_set_error('sms_afe_line', t('SMS line number needs to be a numeric value.'));
    return;
  }

  if (!valid_url($form_state['values']['sms_afe_soap_server'], TRUE)) {
    form_set_error('sms_afe_soap_server', t('SOAP Server Endpoint address needs to be a valid URL.'));
    return;
  }

  if ($form_state['values']['sms_afe_use_line_name']) {
    drupal_set_message(t('You have chosen to use a <em>Line Name</em> instead of your <em>Line Number</em> for outgoing messages. Please make sure that you have a Line Name bundled with your account at <a href="!link">AFE control panel</a> or you get errors.', array('!link' => 'http://AFE/')), 'warning');
  }
}

/**
 * SMSFramework number formatter callback for AFE gateway.
 *
 * @param $number
 *   The number to be pretty formatted.
 * @param $options
 *   Gateway additional options.
 *
 * @return
 *   Formatted number.
 */
function sms_afe_format_number($number, $options = array()) {
  return _sms_afe_number_prefix_purge($number);
}

/**
 * SMSFramework number validator callback for AFE gateway.
 *
 * @param $number
 *   The number to be validated.
 * @param $options
 *   Gateway additional options.
 *
 * @return
 *   Error if could not validate.
 */
function sms_afe_validate_number(&$number, $options = array()) {
  $number = _sms_afe_number_prefix_purge($number);
  if (drupal_strlen($number) != 10) {
    return form_set_error('number', t('Please ensure that you have entered a valid mobile number.'));
  }
}

/**
 * AFE SMS send callback.
 *
 * @param $number
 *   Receiver line number.
 * @param $message
 *   SMS message to be sent.
 * @param $options
 *   An array of additional properties as defined in gateway module's send form.
 *
 * @return
 *   An array outputed from _sms_afe_soap_parse() helper.
 */
function sms_afe_send($number, $message, $options) {
  // The devs at AFE, they requested an associative array,
  // But they process that as an ordinary one! Long live guys!
  $results = _sms_afe_soap_call('SendSMS', array(
    'username' => '',
    'password' => '',
    'reciever' => $number, // Also a typo!
    'text' => $message,
    'sender' => '',
  ));

  // Return the error array, if there were any.
  // If $soap_results['status'] is set to FALSE,
  // $soap_results contains the error array, not the SOAP call results.
  if ($results['status'] == FALSE) {
    drupal_set_message(t($results['message'], $results['variables']), 'error');
    return $results;
  }

  // If we're here, there were no error in the SOAP call and results.
  // Now, we have to check the SOAP operation status code.
  return _sms_afe_soap_parse('SendSMS', $results);
}

/**
 * Menu page callback for traffic relay listener.
 */
function sms_afe_incoming_callback() {
  $receiver = check_plain($_REQUEST['to']);
  $message = check_plain($_REQUEST['text']);
  $sender = _sms_afe_number_prefix_purge(check_plain($_REQUEST['from']));

  watchdog('sms_afe', 'Received SMS message from %sender: %message', array(
    '%sender' => $sender,
    '%message' => $message,
  ));

  // Notify smsframework.
  sms_incoming($sender, $message);
}

/**
 * Access callback for traffic relay listener.
 */
function sms_afe_incoming_access() {
  return TRUE;
}

/**
 * Helper function to get and theme AFE account info.
 *
 * @param $type
 *   Type of needed information to get.
 *
 * @return
 *   Either the operation error or results.
 */
function _sms_afe_info($type) {
  $soap_params = array(
    'username' => '',
    'password' => '',
  );

  switch ($type) {
    case 'credit':
      $soap_results = _sms_afe_soap_call('CREDIT_LINESMS');
      $soap_parsed_results = _sms_afe_soap_parse('CREDIT_LINESMS', $soap_results);

      return ($soap_results['status'] === FALSE || is_null($soap_parsed_results)) ?
        t('Could not get the account balance.') :
        $soap_parsed_results . ' ' . t('IRR.');

    case 'received_new_count':
      $soap_params['method'] = sms_afe_METHOD_NEW;
      $soap_results = _sms_afe_soap_call('COUNT_GETSMS', $soap_params);
      $soap_parsed_results = _sms_afe_soap_parse('COUNT_GETSMS', $soap_results);

      return ($soap_results['status'] === FALSE || is_null($soap_parsed_results)) ?
        t('Could not get the account new messages info.') :
        $soap_parsed_results . ' ' . t('Messages');

    case 'received_total_count':
      $soap_params['method'] = sms_afe_METHOD_TOTAL;
      $soap_results = _sms_afe_soap_call('COUNT_GETSMS', $soap_params);
      $soap_parsed_results = _sms_afe_soap_parse('COUNT_GETSMS', $soap_results);

      return ($soap_results['status'] === FALSE || is_null($soap_parsed_results)) ?
        t('Could not get the account total messages info.') :
        $soap_parsed_results . ' ' . t('Messages');

    case 'sent_count':
      $soap_results = _sms_afe_soap_call('COUNT_SENDSMS');
      $soap_parsed_results = _sms_afe_soap_parse('COUNT_SENDSMS', $soap_results);

      return ($soap_results['status'] === FALSE || is_null($soap_parsed_results)) ?
        t('Could not get the account sent messages info.') :
        $soap_parsed_results . ' ' . t('Messages');
  }
}

/**
 * Helper function to call a remote SOAP method.
 *
 * @param $soap_method
 *   Remote SOAP method to call.
 * @param $soap_params
 *   SOAP parameters.
 * @param $soap_options
 *   SOAP call options.
 *
 * @return
 *   SOAP call results or an error array.
 */
function _sms_afe_soap_call($soap_method, $soap_params = array(), $soap_options = NULL) {
  // Settings default SOAP options, if not yet set.
  if (is_null($soap_options)) {
    $soap_options = array(
      'style' => 'rpc',
      'use' => 'encoded',
    );
  }

  // Getting gateway configuration.
  $gateway = sms_gateways('gateway', 'irantc');

  // Determine which method has been configured to call.
  // Redicolously if sending a message, the 'sender' element
  // should be exactly at this postion in $soap_params array.
  if (_sms_afe_method_type($soap_method) == sms_afe_TYPE_SEND) {
    $soap_params['sender'] = $gateway['configuration']['sms_afe_line'];
    $soap_method = $gateway['configuration']['sms_afe_use_line_name'] ? '‫‪SendSMS_UseName‬‬' : 'SendSMS';
  }

  // Filling necessary SOAP call auth parameters.
  $soap_params['username'] = $gateway['configuration']['sms_afe_username'];
  $soap_params['password'] = $gateway['configuration']['sms_afe_password'];

  // Also add sender (exactly at this position) if
  // we're calling service CREDIT_LINESMS method.
  if ($soap_method == 'CREDIT_LINESMS') {
    $soap_params['sender'] = $gateway['configuration']['sms_afe_line'];
  }

  // Instantiate a DrupalSoapClient instance.
  $soap_server = $gateway['configuration']['sms_afe_soap_server'];
  $soap_client = soapclient_init_client($soap_server, FALSE, $soap_options);

  // Checking instantiation errors.
  if ($soap_client['#error']) {
    watchdog('sms_afe', 'Could not connect to SMS gateway webservice. Details: %error', array('%error' => $soap_client['#error']), WATCHDOG_ERROR);
    return _sms_afe_error('Could not connect to SMS gateway webservice, please recheck SOAP settings. Error details has been logged.', FALSE);
  }

  // Call the SOAP method and check for errors.
  $soap_results = $soap_client['#return']->call($soap_method, $soap_params);
  if ($soap_results['#error']) {
    return _sms_afe_error('Failed to send the SMS message. Faultstring: @faultstring, Error: @error', array(
      '@error' => $soap_results['#error'],
      '@faultstring' => $soap_results['#return']['faultstring'],
    ), FALSE);
  }

  // Return the SOAP call results, if there were no SOAP error.
  // The function who receive these results, should check it for operation status codes.
  return $soap_results['#return'];
}

/**
 * Helper function to handle the module errors.
 *
 * The error array needs to be passed to smsframework via the send callback.
 * It also sets a drupal message to show the message to the end-user if it configured so.
 *
 * @param $message
 *   Error message.
 * @param $variables
 *   Placeholders to be placed in $message.
 * @param $display
 *   To display the message or not.
 *
 * @return
 *   The said error array.
 */
function _sms_afe_error($message, $variables = array(), $display = TRUE) {
  if ($display) {
    drupal_set_message(t($message, $variables), 'error', FALSE);
  }

  watchdog('sms_afe', $message, $variables, WATCHDOG_ERROR);
  return array(
    'status' => FALSE,
    'message' => $message,
    'variables' => $variables,
  );
}

/**
 * Helper function to successify a send operation.
 *
 * The success array needs to be passed to smsframework via the send callback.
 * It also sets a drupal message to show the message to the end-user if it configured so.
 *
 * @param $message
 *   Success message.
 * @param $variables
 *   Placeholders to be placed in $message.
 * @param $display
 *   To display the message or not.
 *
 * @return
 *   The said error array.
 */
function _sms_afe_success($message, $variables = array(), $display = TRUE) {
  if ($display) {
    drupal_set_message(t($message, $variables));
  }

  watchdog('sms_afe', $message, $variables, WATCHDOG_INFO);
  return array(
    'status' => TRUE,
    'message' => $message,
    'variables' => $variables,
  );
}

/**
 * Parses the SOAP method call results, sets messages, etc.
 *
 * @param $soap_method
 *   The name of the SOAP method which have been called.
 * @param $soap_results
 *   Results of the call.
 *
 * @return mixed
 *   Either an array indicating the result of the send
 *   as per required by SMSFramework or NULL indicating a
 *   failure for numeric results (sms_afe_TYPE_CREDIT),
 *   or the SOAP result itself in case of no failure.
 */
function _sms_afe_soap_parse($soap_method, $soap_results) {
  // Parsing a send typed method results.
  if (_sms_afe_method_type($soap_method) == sms_afe_TYPE_SEND) {
    // Got a 8+ character length receipt?
    // So there were a successfull send operation.
    // No need to use drupal's strlen() equivalent here.
    if (strlen($soap_results) >= 8) {
      // TODO: Make it configurable to show/hide SMS receipt.
      return _sms_afe_success('SMS message has been sent successfully. SMS Receipt: @receipt', array('@receipt' => $soap_results), FALSE);
    }
    // Otherwise we got a error status code.
    // TODO: Make it possible to operate in silent mode.
    return _sms_afe_error('There were an error while sending your SMS message. Error code: @code', array('@code' => $soap_results), FALSE);
  }

  // Parsing a credit typed method results.
  elseif (_sms_afe_method_type($soap_method) == sms_afe_TYPE_CREDIT) {
    switch ($soap_results) {
      case '-1':
        drupal_set_message(t('Invalid username or password.'), 'error', FALSE);
        return NULL;

      case '-2':
        drupal_set_message(t('There were a calculation error on remote server. Please try later.'), 'error', FALSE);
        return NULL;

      default:
        return $soap_results;
    }
  }

  // Parsing a SMS Status method results.
  elseif ($soap_method == 'StatusSMS') {
    switch ($soap_results) {
      case '-1':
        drupal_set_message(t('Invalid username or password.'), 'error', FALSE);
        break;

      case '-2':
        drupal_set_message(t('Operation error.'), 'error', FALSE);
        break;

      case '-4':
        drupal_set_message(t('Failed to connect to IRTCI.'), 'error', FALSE);
        break;

      case '-5':
        drupal_set_message(t('There were an error while connecting to IRTCI gateway.'), 'error', FALSE);
        break;

      case '0':
        drupal_set_message(t('The SMS message has been successfully sent to IRTCI.'));
        break;

      case '1':
        drupal_set_message(t('The SMS message has been successfully sent to the recipient.'));
        break;

      case '2':
        drupal_set_message(t('The SMS message has been failed to be sent to the recipient.'), 'warning');
        break;

      case '4':
        drupal_set_message(t('The SMS message is already in the IRTCI sending queue.'), 'warning');
        break;

      case '8':
        drupal_set_message(t('The SMS message has been successfully arrived to IRTCI.'));
        break;

      case '16':
        drupal_set_message(t('The SMS message has not yet arrived to IRTCI.'), 'warning');
        break;

      default:
        drupal_set_message(t('The SMS status is unknown.'), 'error', FALSE);
        break;
    }
  }
}

/**
 * Helper function to determine a SOAP method type.
 *
 * @param $method
 *   The name of the SOAP method.
 *
 * @return
 *   The method category.
 */
function _sms_afe_method_type($method) {
  // Defining method categories as arrays
  // for better readability and easy future edits.
  $types = array(
    'SEND' => array(
      'SendSMS', 'SendSMS_UseName',
    ),
    'CREDIT' => array(
      'CREDIT_LINESMS', 'COUNT_GETSMS', 'COUNT_SENDSMS',
    ),
  );

  if (in_array($method, $types['SEND'])) {
    return sms_afe_TYPE_SEND;
  }
  elseif (in_array($method, $types['CREDIT'])) {
    return sms_afe_TYPE_CREDIT;
  }
}

/**
 * Helper function to remove zero and/or area code prefixes from a mobile number.
 *
 * @param $number
 *   Number to get prefix-purged!
 *
 * @return
 *   Prefix-purged number.
 */
function _sms_afe_number_prefix_purge($number) {
  $number = ltrim(trim($number), '0');
  $number = str_replace('+98', '', $number);

  if (substr($number, 0, 2) == '98') {
    $number = substr($number, 2);
  }

  return $number;
}
