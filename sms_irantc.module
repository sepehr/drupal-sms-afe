<?php
// $Id$

/**
 * @file
 * Support for sending and recieving SMS messages using Iran.tc gateway.
 */

/**
 * Module constants.
 */
define('SMS_IRANTC_METHOD_NEW', 1);
define('SMS_IRANTC_METHOD_TOTAL', 2);

/**
 * Implementation of hook_menu().
 */
function sms_irantc_menu() {
  $items = array();
  
  $items['sms/irantc/receiver'] = array(
    'title' => 'Incoming SMS Messages Gateway',
    'description' => 'Incoming SMS messages form Iran.tc gateway',
    'page callback' => 'sms_irantc_incoming_callback',
    'access callback' => 'sms_irantc_incoming_access',
    'type' => MENU_CALLBACK,
  );
  
  return $items;
}

/**
 * Implementation of hook_gateway_info().
 */
function sms_irantc_gateway_info() {
  return array(
    'irantc' => array(
      'name' => 'Iran.tc',
      'send' => 'sms_irantc_send',
      'send form' => 'sms_irantc_send_form',
      'configure form' => 'sms_irantc_admin_form',
      'recieve' => TRUE,      
    ),
  );
}

/**
 * Iran.tc SMS gateway administration form.
 *
 * @param $configuration
 *   SMS gateway configuration.
 *
 * @ingroup forms
 */
function sms_irantc_admin_form($configuration) {
  $form = array();

  $form['sms_irantc_line'] = array(
    '#type' => 'textfield',
    '#title' => t('Line Number'),
    '#description' => t('The number of your Iran.tc phone line.'),
    '#default_value' => $configuration['sms_irantc_line'],
    '#required' => TRUE,
  );
  
  $form['sms_irantc_username'] = array(
    '#type' => 'textfield',
    '#title' => t('Username'),
    '#description' => t('The username of your Iran.tc account.'),
    '#default_value' => $configuration['sms_irantc_username'],
    '#required' => TRUE,
  );
  
  $form['sms_irantc_password'] = array(
    '#type' => 'textfield',
    '#title' => t('Password'),
    '#description' => t('The password of your Iran.tc account.'),
    '#default_value' => $configuration['sms_irantc_password'],
    '#required' => TRUE,
  );    
  
  // Outgoing SMS Settings fieldset.
  $form['sms_irantc_outgoing_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Outgoing SMS Settings'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  
  $server = $configuration['sms_irantc_soap_server'];
  $server = $server ? $server : 'http://iran.tc/WebService/Service.php';
  $form['sms_irantc_outgoing_settings']['sms_irantc_soap_server'] = array(
    '#type' => 'textfield',
    '#title' => t('SOAP Server Endpoint'),
    '#description' => t('Do not change the default, Unless you have a different endpoint in your technical documentation.'),
    '#default_value' => $server,
    '#required' => TRUE,
  );       
  
  $form['sms_irantc_outgoing_settings']['sms_irantc_use_line_name'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use the line name instead of its number.'),
    '#description' => t('If checked, SMS messages will be sent via your Line Name not the number. Note that you need to purchase a line name first.'),
    '#default_value' => $configuration['sms_irantc_use_line_name'],
    '#return_value' => TRUE,
  );    
  
  if ($configuration['sms_irantc_username'] && $configuration['sms_irantc_password']) {
    // Incoming SMS Settings fieldset.
    $form['sms_irantc_incoming_settings'] = array(
      '#type' => 'fieldset',
      '#title' => t('Incoming SMS Settings'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
    
    global $base_root;
    $form['sms_irantc_incoming_settings']['sms_irantc_receiver'] = array(
      '#type' => 'textfield',
      '#title' => t('Traffic Relay Gateway'),
      '#description' => t("This is where we listen for incoming SMS messages. You need to copy & paste this URL into your http://iran.tc/ panel's settings."),
      '#value' => $base_root . url('sms/irantc/receiver'),
      '#disabled' => TRUE,
    );

    // Account Information fieldset.
    $form['sms_irantc_info'] = array(
      '#type' => 'fieldset',
      '#title' => t('Account Information'),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
    );
    
    $tmp = _sms_irantc_info('credit');
    $tmp = ($tmp === '0' || $tmp) ? $tmp . ' ' . t('IRR.') : t('Could not get the account balance.');
    $form['sms_irantc_info']['sms_irantc_info_credit'] = array(
      '#type' => 'item',
      '#title' => t('Account Balance'),
      '#description' => t('You Iran.tc SMS balance.'),
      '#value' =>  $tmp,
    );
    
    $tmp = _sms_irantc_info('sent_count');
    $tmp = ($tmp === '0' || $tmp) ? $tmp . ' ' . t('SMS Messages.') : t('Could not get the account information.');
    $form['sms_irantc_info']['sms_irantc_info_sent_count'] = array(
      '#type' => 'item',
      '#title' => t('Sent Count'),
      '#description' => t('The total number of SMS messages sent from your Iran.tc account.'),
      '#value' => $tmp,
    );
    
    $tmp = _sms_irantc_info('recieved_total_count');
    $tmp = ($tmp === '0' || $tmp) ? $tmp . ' ' . t('SMS Messages.') : t('Could not get the account information.');
    $form['sms_irantc_info']['sms_irantc_info_received_count'] = array(
      '#type' => 'item',
      '#title' => t('Received Count'),
      '#description' => t('The total number of SMS messages received into your Iran.tc account.'),
      '#value' => $tmp,
    );    
  }
  
  return $form;
}

/**
 * Validation callback for administration form.
 */
function sms_irantc_admin_form_validate($form, &$form_state) {
  if (!ctype_digit($form_state['values']['sms_irantc_line'])) {
    form_set_error('sms_irantc_line', t('SMS line number needs to be a numeric value.'));
    return;
  }
  
  if (!valid_url($form_state['values']['sms_irantc_soap_server'], TRUE)) {
    form_set_error('sms_irantc_soap_server', t('SOAP Server Endpoint address needs to be a valid URL.'));
    return;
  }
  
  if ($form_state['values']['sms_irantc_use_line_name']) {
    drupal_set_message(t('You have chosen to use a <em>Line Name</em> instead of your <em>Line Number</em> for outgoing messages. Please make sure that you have a Line Name bundled with your account at <a href="!link">Iran.tc control panel</a> or you get errors.', array('!link' => 'http://iran.tc/')), 'warning');
  }
}

/**
 * Iran.tc SMS send form.
 */
function sms_irantc_send_form() {
  $form['area_code'] = array(
    '#type' => 'select',
    '#title' => t('Area code'),
    '#multiple' => FALSE,
    '#default_value' => '98',
    '#options' => _sms_irantc_area_codes(),
  );
  
  return $form;
}

/**
 * Iran.tc SMS send callback.
 *
 * @param $number
 *   Receiver line number.
 * @param $message
 *   SMS message to be sent.
 * @param $options
 *   An array of additional properties as defined in gateway module's send form.
 *
 * @return
 *   An array outputed from _sms_irantc_soap_parse() helper.
 */
function sms_irantc_send($number, $message, $options) {
  // The devs at Iran.tc, they requested an associative array,
  // But they process that as an ordinary array! ***************!
  $results = _sms_irantc_soap_call('SendSMS', array(
    'username' => '',
    'password' => '',
    'reciever' => $number, // Ya, they also have a typo here!
    'text' => $message,
    'sender' => '',         
  ));
  
  // Return the error array, if there were any.
  // If $soap_results['status'] is set to FALSE, 
  // $soap_results contains the error array, not the SOAP call results.
  if ($results['status'] == FALSE) {
    drupal_set_message(t($results['message'], $results['variables']), 'error');
    return $results;
  }
  
  // If we're here, there were no error in the SOAP call and results.
  // Now, we have to check the SOAP operation status code.
  return _sms_irantc_soap_parse('SendSMS', $results);
}

/**
 * Menu page callback for traffic relay listener.
 */
function sms_irantc_incoming_callback() {
  $sender = check_plain($_REQUEST['from']);
  $receiver = check_plain($_REQUEST['to']);  
  $message = check_plain($_REQUEST['text']);
  
  watchdog('sms_irantc', 'Received SMS message from %sender: %message', array(
    '%sender' => $sender,
    '%message' => $message,
  ));
  
  // Notify smsframework.
  sms_incoming($sender, $message);
}

/**
 * Menu access callback for traffic relay listener.
 */
function sms_irantc_incoming_access() {
  return TRUE;
}

/**
 * Helper function to get Iran.tc account info.
 *
 * @param $type
 *   Type of needed information to get.
 *
 * @return
 *   Either the operation error or results.
 */
function _sms_irantc_info($type) {
  // Getting gateway configuration and setting SOAP parameters.
  $gateway = sms_gateways('gateway', 'irantc');  
  $soap_params = array(
    'username' => $gateway['configuration']['sms_irantc_username'],
    'password' => $gateway['configuration']['sms_irantc_password'],
  );
  
  switch ($type) {
    case 'credit':
      $soap_results = _sms_irantc_soap_call('CREDIT_LINESMS', $soap_params);
      return _sms_irantc_soap_parse('CREDIT_LINESMS', $soap_results);
      
    case 'recieved_new_count':
      $soap_params['method'] = SMS_IRANTC_METHOD_NEW;
      $soap_results = _sms_irantc_soap_call('COUNT_GETSMS', $soap_params);
      return _sms_irantc_soap_parse('COUNT_GETSMS', $soap_results);
      
    case 'recieved_total_count':
      $soap_params['method'] = SMS_IRANTC_METHOD_TOTAL;
      $soap_results = _sms_irantc_soap_call('COUNT_GETSMS', $soap_params);
      return _sms_irantc_soap_parse('COUNT_GETSMS', $soap_results);
      
    case 'sent_count':
      $soap_results = _sms_irantc_soap_call('COUNT_SENDSMS', $soap_params);
      return _sms_irantc_soap_parse('COUNT_SENDSMS', $soap_results);
  }    
}

/**
 * Helper function to call a remote SOAP method.
 *
 * @param $soap_method
 *   Remote SOAP method to call.
 * @param $soap_params
 *   SOAP parameters.
 * @param $soap_options
 *   SOAP call options.
 *
 * @return
 *   SOAP call results or an error array.
 */
function _sms_irantc_soap_call($soap_method, $soap_params, $soap_options = NULL) {
  // Settings default SOAP options, if not yet set.
  if (is_null($soap_options)) {
    $soap_options = array(
      'style' => 'rpc',
      'use' => 'encoded',
    );
  }
  
  // Getting gateway configuration.
  $gateway = sms_gateways('gateway', 'irantc');
  
  // Determine which method has been configured to call.
  if ($soap_method == 'SendSMS') {    
    $soap_params['sender'] = $gateway['configuration']['sms_irantc_line'];
    if ($gateway['configuration']['sms_irantc_use_line_name'] == TRUE) {
      $soap_method = '‫‪SendSMS_UseName‬‬';
    }
  }
  
  // Filling necessary SOAP call auth parameters.
  $soap_params['username'] = $gateway['configuration']['sms_irantc_username'];
  $soap_params['password'] = $gateway['configuration']['sms_irantc_password'];
  
  // Getting a DrupalSoapClient instance.
  $soap_server = $gateway['configuration']['sms_irantc_soap_server'];
  $soap_client = soapclient_init_client($soap_server, FALSE, $soap_options);
    
  // Checking instantiation errors.
  if ($soap_client['#error']) {
    return _sms_irantc_error('Could not connect to SMS gateway webservice.');
  }
  
  // Call the SOAP method and check for errors.
  $soap_results = $soap_client['#return']->call($soap_method, $soap_params);
  if ($soap_results['#error']) {
    return _sms_irantc_error('Failed to send the SMS message. Error: @error', array(
      '@error' => $soap_results['#return']['faultstring'],
    ));
  }
  
  // Return the SOAP call results, if there were no SOAP error.
  // The function who recive this results, should check it for operation status codes.
  return $soap_results['#return'];
}

/**
 * Helper function to handle the module errors.
 *
 * The error array needs to be passed to smsframework via the send callback.
 * It also sets a drupal message to show the message to the end-user if it configured so.
 *
 * @param $message
 *   Error message.
 * @param $variables
 *   Placeholders to be placed in $message.
 * @param $display
 *   To display the message or not.
 *
 * @return
 *   The said error array.
 */
function _sms_irantc_error($message, $variables = array(), $display = TRUE) {
  if ($display) {
    drupal_set_message(t($message, $variables), 'error', FALSE);
  }
  
  return array(
    'status' => FALSE,
    'message' => $message,
    'variables' => $variables,
  );
}

/**
 * Helper function to successify a send operation.
 *
 * The success array needs to be passed to smsframework via the send callback.
 * It also sets a drupal message to show the message to the end-user if it configured so.
 *
 * @param $message
 *   Success message.
 * @param $variables
 *   Placeholders to be placed in $message.
 * @param $display
 *   To display the message or not.
 *
 * @return
 *   The said error array.
 */
function _sms_irantc_success($message, $variables = array(), $display = TRUE) {
  if ($display) {
    drupal_set_message(t($message, $variables));
  }
  
  return array(
    'status' => TRUE,
    'message' => $message,
    'variables' => $variables,
  );
}

/**
 * Parses the SOAP method call results.
 * 
 * @param $soap_method
 *   The name of the SOAP method which have been called.
 * @param $soap_results
 *   Results of the call.
 *
 * @return
 *   An array indicating the result of the send.
 */
function _sms_irantc_soap_parse($soap_method, $soap_results) {
  // Defining method categories,
  // to be able to run the proper action.
  $methods = array(
    'sender' => array(
      'SendSMS', 'SendSMS_UseName',
    ),
    'credit' => array(
      'CREDIT_LINESMS', 'COUNT_GETSMS', 'COUNT_SENDSMS',
    ),
  );
  
  // Parsing a sender method results.
  if (in_array($soap_method, $methods['sender'])) {
    // Got a 8+ character long receipt?
    // So there were a successfull send operation.
    if (strlen($soap_results) >= 8) {
      return _sms_irantc_success('Your SMS message has been sent successfully. SMS Receipt: @receipt', array('@receipt' => $soap_results));
    }
    
    return _sms_irantc_error('There were an error while sending your SMS message. Error code: @code', array('@code' => $soap_results));
  }
  
  // Parsing a credit method results.
  else if (in_array($soap_method, $methods['credit'])) {
    switch ($soap_results) {
      case '-1':
        drupal_set_message(t('Invalid username or password.'), 'error', FALSE);
        break;
        
      case '-2':
        drupal_set_message(t('There were a calculation error on remote server. Please try later.'), 'error', FALSE);
        break;
        
      default:
        return $soap_results;
    }
  }
  
  // Parsing a SMS Status method results.
  else if ($soap_method == 'StatusSMS') {
    switch ($soap_results) {
      case '-1':
        drupal_set_message(t('Invalid username or password.'), 'error', FALSE);
        break;
        
      case '-2':
        drupal_set_message(t('Operation error.'), 'error', FALSE);
        break;
        
      case '-4':
        drupal_set_message(t('Failed to connect to IRTCI.'), 'error', FALSE);
        break;
        
      case '-5':
        drupal_set_message(t('There were an error while connecting to IRTCI gateway.'), 'error', FALSE);
        break;
        
      case '0':
        drupal_set_message(t('The SMS message has been successfully sent to IRTCI.'));
        break;
        
      case '1':
        drupal_set_message(t('The SMS message has been successfully sent to the recipient.'));
        break;
        
      case '2':
        drupal_set_message(t('The SMS message has been failed to be sent to the recipient.'), 'warning');
        break;
        
      case '4':
        drupal_set_message(t('The SMS message is already in the IRTCI sending queue.'), 'warning');
        break;
      
      case '8':
        drupal_set_message(t('The SMS message has been successfully arrived to IRTCI.'));
        break;
      
      case '16':
        drupal_set_message(t('The SMS message has not yet arrived to IRTCI.'), 'warning');
        break;
                
      default:
        drupal_set_message(t('The SMS status is unknown.'), 'error', FALSE);
        break;
    }
  }
}

/**
 * Helper function to return an array of Iran.tc gateway supported area codes.
 *
 * @return
 *   An array of supported area codes.
 */
function _sms_irantc_area_codes() {
  return array(
    98 => '+98 (Iran)',
  );
}
